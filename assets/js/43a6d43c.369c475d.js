"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2156],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),d=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},l=function(e){var t=d(e.components);return n.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,c=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(a),m=r,f=p["".concat(i,".").concat(m)]||p[m]||u[m]||c;return a?n.createElement(f,o(o({ref:t},l),{},{components:a})):n.createElement(f,o({ref:t},l))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=a.length,o=new Array(c);o[0]=p;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var d=2;d<c;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},5665:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const c={sidebar_position:10},o="Verifying Smart Contracts",s={unversionedId:"smart-contracts/verify",id:"smart-contracts/verify",title:"Verifying Smart Contracts",description:"Smart Contract verification is an important process to ensure you are running the correct contract.",source:"@site/docs/04-smart-contracts/10-verify.md",sourceDirName:"04-smart-contracts",slug:"/smart-contracts/verify",permalink:"/docs/smart-contracts/verify",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"defaultSidebar",previous:{title:"Develop dApp",permalink:"/docs/smart-contracts/frontend_app/dapp-development"},next:{title:"Migration",permalink:"/docs/smart-contracts/migration"}},i={},d=[{value:"Inspect Code",id:"inspect-code",level:2},{value:"Find the Original Code",id:"find-the-original-code",level:2},{value:"Compile Yourself",id:"compile-yourself",level:3},{value:"Last Note",id:"last-note",level:2}],l={toc:d};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"verifying-smart-contracts"},"Verifying Smart Contracts"),(0,r.kt)("p",null,"Smart Contract verification is an important process to ensure you are running the correct contract.\nYou can verify any smart contract on chain."),(0,r.kt)("p",null,"Let's go over real case. There is a live contract on chain that you want to determine code name and version."),(0,r.kt)("h2",{id:"inspect-code"},"Inspect Code"),(0,r.kt)("p",null,"Our case contract address is ",(0,r.kt)("inlineCode",{parentName:"p"},"juno1unclk8rny4s8he4v2j826rattnc7qhmhwlv3wm9qlc2gamhad0usxl7jnd")," on juno uni\ntesting network."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cw-plus/tree/main/packages/cw2#cw2-spec-contract-info"},"CW2 Spec")," defines contract information to be stored on state. We can query the\ncontract information using command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'junod query wasm contract-state raw juno1unclk8rny4s8he4v2j826rattnc7qhmhwlv3wm9qlc2gamhad0usxl7jnd 636F6E74726163745F696E666F --node $RPC --output json | jq  -r .data | base64 -d | jq\n{\n  "contract": "crates.io:cw20-base",\n  "version": "0.10.3"\n}\n')),(0,r.kt)("p",null,"What is 636F6E74726163745F696E666F?"),(0,r.kt)("p",null,'ContractInfo is stored under "contract_info" key which translates to "636F6E74726163745F696E666F" in hex format as documented ',(0,r.kt)("a",{parentName:"p",href:"https://crates.io/crates/cw2"},"here"),"."),(0,r.kt)("p",null,"Now we found out this code is a cw20-base and the version is ",(0,r.kt)("inlineCode",{parentName:"p"},"0.10.3"),"."),(0,r.kt)("p",null,"We need hash, for that we need code ID. Here is how you get that:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'junod query wasm contract juno1unclk8rny4s8he4v2j826rattnc7qhmhwlv3wm9qlc2gamhad0usxl7jnd  --node $RPC --output json  | jq\n{\n  "address": "juno1unclk8rny4s8he4v2j826rattnc7qhmhwlv3wm9qlc2gamhad0usxl7jnd",\n  "contract_info": {\n    "code_id": "122",\n    "creator": "juno1d3axtckm7f777vlu5v8dy8dsd6fefhhnmsrrps",\n    "admin": "",\n    "label": "Hidden",\n    "created": null,\n    "ibc_port_id": "",\n    "extension": null\n  }\n}\n')),(0,r.kt)("p",null,"Nice one Detective Gadget, you found code_id, creator address, admin and label too."),(0,r.kt)("p",null,"We need the actual code now:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"junod query wasm code 122 122_code.wasm --node $RPC\nDownloading wasm code to 122_code.wasm\n")),(0,r.kt)("p",null,"Now the hash:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"sha256sum 122_code.wasm\n46bd624fff7f11967aac6ddaecf29201d1897be5216335ccddb659be5b524c52  122_code.wasm\n")),(0,r.kt)("p",null,"We found it ",(0,r.kt)("inlineCode",{parentName:"p"},"46bd624fff7f11967aac6ddaecf29201d1897be5216335ccddb659be5b524c52"),"!"),(0,r.kt)("h2",{id:"find-the-original-code"},"Find the Original Code"),(0,r.kt)("p",null,"You can find hashes it on source repo if provider published them. cw-plus smart contracts hashes are published\nalongside smart contract code at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cw-plus/releases"},"cw-plus"),"."),(0,r.kt)("p",null,"You can download hashes from ",(0,r.kt)("inlineCode",{parentName:"p"},"checksums.txt")),(0,r.kt)("p",null,"Here is a sample one:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"fe34cfff1cbc24594740164abb953f87735afcdecbe8cf79a70310e36fc13aa0  cw1155_base.wasm\nde49426e9deed6acf23d5e930a81241697b77b18131c9aea5c3ca800c028459e  cw1_subkeys.wasm\nc424b66e7f289cef69e1408ec18732e034b0604e4b22bfcca7546cc9d57875e3  cw1_whitelist.wasm\ne462d44a086a936c681f3b3389d50b8404ce2152c8f0fb32b257064576210c03  cw1_whitelist_ng.wasm\n0b2e5d5dc895f8f49f833b076a919774bb5b0d25bf72819e9a1cbdf70f9bf79b  cw20_atomic_swap.wasm\n6c1fa5872e1db821ee207b5043d679ad1f57c40032d2fd01834cd04d0f3dbafb  cw20_base.wasm\nf00759aa9a221efeb58b61a1a1d4cc4281cdce39d71ac4d8d78d234f03b3b0eb  cw20_bonding.wasm\nb6041789cc227472c801763c3fab57a81005fb0c30cf986185aba5e0b429d2e6  cw20_escrow.wasm\n91b35168d761de9b0372668dd8fa8491f2c8faedf95da602647f4bade7cb9f57  cw20_ics20.wasm\nd408a2195df29379b14c11277f785b5d3f57b71886b0f72e0c90b4e84c2baa4a  cw20_merkle_airdrop.wasm\n934ba53242e158910a2528eb6c6b82deb95fe866bbc32a8c9afa7b97cfcb9af4  cw20_staking.wasm\nac1f2327f3c80f897110f0fca0369c7022586e109f856016aef91f3cd1f417c1  cw3_fixed_multisig.wasm\n785340c9eff28e0faeb77df8cca0fafee6b93a1fa033d41bda4074cd97600ec1  cw3_flex_multisig.wasm\n87b3ad1dee979afc70e5c0f19e8510d9dcc8372c8ef49fc1da76725cad706975  cw4_group.wasm\n4651e90405917897f48d929198278f238ec182ac018c414ee22f2a007a052c1e  cw4_stake.wasm\n")),(0,r.kt)("h3",{id:"compile-yourself"},"Compile Yourself"),(0,r.kt)("p",null,"If you tried to find ",(0,r.kt)("inlineCode",{parentName:"p"},"0.10.3")," code hash on GitHub, you would have failed to find it because it is a minor release,\nso no hash provided."),(0,r.kt)("p",null,"Let's generate it ourselves."),(0,r.kt)("p",null,"The reason we use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/rust-optimizer"},"rust-optimizer")," is not just for generating performant and\nsmall code size, also for deterministic code output so that it will be comparable. Hashes in the example above are\nall output of rust-optimizer."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'docker run --rm -v "$(pwd)":/code \\\n  --mount type=volume,source="$(basename "$(pwd)")_cache",target=/code/target \\\n  --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry \\\n  cosmwasm/workspace-optimizer:0.12.4\n')),(0,r.kt)("p",null,"On Windows, you can use the following command instead"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},'docker run --rm -v ${pwd}:/code `\n --mount type=volume,source="$("$(Split-Path -Path $pwd -Leaf)")_cache",target=/code/target `\n --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry `\n cosmwasm/rust-optimizer:0.12.6\n')),(0,r.kt)("p",null,"Hashes will be generated at ",(0,r.kt)("inlineCode",{parentName:"p"},"./artifacts/checksums.txt"),"."),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"There is an ",(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/cosmwasm/rust-optimizer-arm64"},"rust-optimizer-arm64")," docker builder image that\ngives faster output on Apple M1 chip.\nArm images are released to ease development and testing on Mac M1 machines.\nThe native Arm version produces different wasm artifacts than the Intel version.\nFor release / production use, only contracts built with the Intel optimizers must be used.")),(0,r.kt)("p",null,"You can find the value and compare it to the value we got."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cat ./artifacts/checksums.txt | grep cw20_base.wasm\n46bd624fff7f11967aac6ddaecf29201d1897be5216335ccddb659be5b524c52  cw20_base.wasm\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'diff  <(echo "46bd624fff7f11967aac6ddaecf29201d1897be5216335ccddb659be5b524c52" ) <(echo "46bd624fff7f11967aac6ddaecf29201d1897be5216335ccddb659be5b524c52")\n')),(0,r.kt)("p",null,"Hashes do match, contract is verified."),(0,r.kt)("h2",{id:"last-note"},"Last Note"),(0,r.kt)("p",null,"Documentation above should give a clear idea about verification. This logic can be easily implemented on different\nlanguages, CosmJS in particular."))}u.isMDXComponent=!0}}]);