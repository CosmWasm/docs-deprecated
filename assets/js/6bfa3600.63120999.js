"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7655],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,f=d["".concat(i,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(f,s(s({ref:t},l),{},{components:n})):r.createElement(f,s({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3744:function(e,t,n){n.r(t),n.d(t,{assets:function(){return i},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return u}});var r=n(3117),o=(n(7294),n(3905));const a={sidebar_position:14},s="Sudo Execution",c={unversionedId:"smart-contracts/sudo",id:"smart-contracts/sudo",title:"Sudo Execution",description:"One of the wonders of the Cosmos SDK is governance.",source:"@site/docs/04-smart-contracts/14-sudo.md",sourceDirName:"04-smart-contracts",slug:"/smart-contracts/sudo",permalink:"/docs/1.0/smart-contracts/sudo",draft:!1,editUrl:"https://github.com/InterWasm/docs/edit/main/docs/04-smart-contracts/14-sudo.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14},sidebar:"docsSidebar",previous:{title:"Testing",permalink:"/docs/1.0/smart-contracts/testing"},next:{title:"Integration",permalink:"/docs/1.0/integration"}},i={},u=[{value:"Proposal",id:"proposal",level:2}],l={toc:u};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"sudo-execution"},"Sudo Execution"),(0,o.kt)("p",null,"One of the wonders of the Cosmos SDK is ",(0,o.kt)("a",{parentName:"p",href:"https://docs.cosmos.network/v0.44/modules/gov/"},"governance"),".\nNetwork participants can vote on proposals to decide the future of the network. Proposals can contain messages\nthat will be executed based on the result of the voting."),(0,o.kt)("p",null,"We can define a smart contract entry point that can only be called by trusted native Cosmos modules.\nThis entry point is ",(0,o.kt)("inlineCode",{parentName:"p"},"sudo"),". It can not be called by users or other smart contracts\nbut only by Cosmos modules. This means that ",(0,o.kt)("inlineCode",{parentName:"p"},"sudo")," is useful for more than just governance."),(0,o.kt)("p",null,"First we need a msg type:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'/// SudoMsg is only exposed for internal Cosmos SDK modules to call.\n/// This is showing how we can expose "admin" functionality than can not be called by\n/// external users or contracts, but only trusted (native/Go) code in the blockchain\n#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\n#[serde(rename_all = "snake_case")]\npub enum SudoMsg {\n    MoveFunds {\n        recipient: String,\n        amount: Vec<Coin>,\n    },\n}\n')),(0,o.kt)("p",null,"Then the entry point:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[entry_point]\npub fn sudo(_deps: DepsMut, _env: Env, msg: SudoMsg) -> Result<Response, HackError> {\n    match msg {\n        SudoMsg::MoveFunds { recipient, amount } => {\n            let msg = BankMsg::Send {\n                to_address: recipient,\n                amount,\n            };\n            Ok(Response::new().add_message(msg))\n        }\n    }\n}\n")),(0,o.kt)("p",null,"This can be tested as normal."),(0,o.kt)("p",null,"When using ",(0,o.kt)("inlineCode",{parentName:"p"},"multi-test")," you will need to add an additional call to the contract wrapper:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn contract_template() -> Box<dyn Contract<Empty>> {\n    let contract = ContractWrapper::new(\n        crate::contract::execute,\n        crate::contract::instantiate,\n        crate::contract::query,\n    );\n    let contract_with_sudo = contract.with_sudo(crate::contract::sudo);\n    Box::new(contract_with_sudo)\n}\n")),(0,o.kt)("h2",{id:"proposal"},"Proposal"),(0,o.kt)("p",null,"The Smart contract must be instantiated before governance can execute it."),(0,o.kt)("p",null,"The interface for executing a smart contract via governance is similar to any proposal."),(0,o.kt)("p",null,"The JSON for the message defined earlier will need to be supplied with the proposal."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"wasmd tx gov submit-proposal sudo-contract [contract_addr_bech32] [json_encoded_migration_args] [flags]\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"json_encoded_migration_args")," accepts the JSON-encoded ",(0,o.kt)("inlineCode",{parentName:"p"},"SudoMsg"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "move_funds": {\n    "amount": "100000",\n    "recipient": "wasm126kmp3ceapx2gxrju3uruxd2d440raxaz8xa90"\n  }\n}\n')))}p.isMDXComponent=!0}}]);