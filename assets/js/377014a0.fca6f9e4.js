"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8774],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?o.createElement(k,a(a({ref:t},l),{},{components:n})):o.createElement(k,a({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,a[1]=p;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1338:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return a},default:function(){return u},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return c}});var o=n(3117),r=(n(7294),n(3905));const i={id:"cw20-bonding",sidebar_position:3,title:"CW20 Bonding"},a="CW20 Bonding",p={unversionedId:"cw20-bonding",id:"cw20-bonding",title:"CW20 Bonding",description:"Source code is at cw20-bonding.",source:"@site/cw-tokens/cw20-bonding.md",sourceDirName:".",slug:"/cw20-bonding",permalink:"/cw-tokens/cw20-bonding",draft:!1,editUrl:"https://github.com/InterWasm/docs/edit/main/cw-tokens/cw20-bonding.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"cw20-bonding",sidebar_position:3,title:"CW20 Bonding"},sidebar:"cwPlus",previous:{title:"CW20 Atomic Swap",permalink:"/cw-tokens/cw20-atomic-swap"},next:{title:"CW20 Escrow",permalink:"/cw-tokens/cw20-escrow"}},s={},c=[{value:"Design",id:"design",level:2},{value:"Math",id:"math",level:3}],l={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cw20-bonding"},"CW20 Bonding"),(0,r.kt)("p",null,"Source code is at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cw-tokens/tree/main/contracts/cw20-bonding"},"cw20-bonding"),"."),(0,r.kt)("h2",{id:"design"},"Design"),(0,r.kt)("p",null,"There are two variants - accepting native tokens and accepting cw20 tokens as the ",(0,r.kt)("em",{parentName:"p"},"reserve")," token (this is the token\nthat is input to the bonding curve)."),(0,r.kt)("p",null,"Minting: When the input is sent to the contract (either via ",(0,r.kt)("inlineCode",{parentName:"p"},"ExecuteMsg::Buy{}"),"\nwith native tokens, or via ",(0,r.kt)("inlineCode",{parentName:"p"},"ExecuteMsg::Receive{}")," with cw20 tokens), those tokens remain on the contract and it issues\nit's own token to the sender's account (known as ",(0,r.kt)("em",{parentName:"p"},"supply")," token)."),(0,r.kt)("p",null,"Burning: We override the burn function to not only burn the requested tokens, but also release a proper number of the\ninput tokens to the account that burnt the custom token"),(0,r.kt)("p",null,"Curves: ",(0,r.kt)("inlineCode",{parentName:"p"},"handle")," specifies a bonding function, which is sent to parameterize\n",(0,r.kt)("inlineCode",{parentName:"p"},"handle_fn")," (which does all the work). The curve is set when compiling the contract. In fact many contracts can just\nwrap ",(0,r.kt)("inlineCode",{parentName:"p"},"cw20-bonding")," and specify the custom curve parameter."),(0,r.kt)("p",null,"Read more about ",(0,r.kt)("a",{parentName:"p",href:"https://yos.io/2018/11/10/bonding-curves/"},"bonding curve math here")),(0,r.kt)("p",null,"Note: the first version only accepts native tokens as the"),(0,r.kt)("h3",{id:"math"},"Math"),(0,r.kt)("p",null,"Given a price curve ",(0,r.kt)("inlineCode",{parentName:"p"},"f(x)")," = price of the ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),"th token, we want to figure out how to buy into and sell from the bonding\ncurve. In fact we can look at the total supply issued. let ",(0,r.kt)("inlineCode",{parentName:"p"},"F(x)")," be the integral of ",(0,r.kt)("inlineCode",{parentName:"p"},"f(x)"),". We have issued\n",(0,r.kt)("inlineCode",{parentName:"p"},"x")," tokens for ",(0,r.kt)("inlineCode",{parentName:"p"},"F(x)")," sent to the contract. Or, in reverse, if we send\n",(0,r.kt)("inlineCode",{parentName:"p"},"x")," tokens to the contract, it will mint ",(0,r.kt)("inlineCode",{parentName:"p"},"F^-1(x)")," tokens."),(0,r.kt)("p",null,"From this we can create some formulas. Assume we currently have issued ",(0,r.kt)("inlineCode",{parentName:"p"},"S"),"\ntokens in exchange for ",(0,r.kt)("inlineCode",{parentName:"p"},"N = F(S)")," input tokens. If someone sends us ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," tokens, how much will we issue?"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"F^-1(N+x) - F^-1(N)")," = ",(0,r.kt)("inlineCode",{parentName:"p"},"F^-1(N+x) - S")),(0,r.kt)("p",null,"And if we sell ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," tokens, how much we will get out:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"F(S) - F(S-x)")," = ",(0,r.kt)("inlineCode",{parentName:"p"},"N - F(S-x)")),(0,r.kt)("p",null,"Just one calculation each side. To be safe, make sure to round down and always check against ",(0,r.kt)("inlineCode",{parentName:"p"},"F(S)")," when using ",(0,r.kt)("inlineCode",{parentName:"p"},"F^-1(S)"),"\nto estimate how much should be issued. This will also safely give us how many tokens to return."),(0,r.kt)("p",null,"There is built in support for\nsafely ",(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/primitive.i128.html#method.checked_pow"},"raising i128 to an integer power"),". There\nis also a crate\nto ",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/num-integer/0.1.43/num_integer/trait.Roots.html"},"provide nth-root of for all integers"),". With these\ntwo, we can handle most math except for logs/exponents."),(0,r.kt)("p",null,"Compare this\nto ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/7b7ff729b82ea73ea168e495d9c94cb901ae95ce/contracts/math/Power.sol"},"writing it all in solidity")),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("p",null,"Price Constant: ",(0,r.kt)("inlineCode",{parentName:"p"},"f(x) = k")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"F(x) = kx")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"F^-1(x) = x/k")),(0,r.kt)("p",null,"Price Linear: ",(0,r.kt)("inlineCode",{parentName:"p"},"f(x) = kx")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"F(x) = kx^2/2")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"F^-1(x) = (2x/k)^(0.5)")),(0,r.kt)("p",null,"Price Square Root: ",(0,r.kt)("inlineCode",{parentName:"p"},"f(x) = x^0.5")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"F(x) = x^1.5/1.5")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"F^-1(x) = (1.5*x)^(2/3)")),(0,r.kt)("p",null,"We will only implement these curves to start with, and leave it to others to import this with more complex curves,"))}u.isMDXComponent=!0}}]);