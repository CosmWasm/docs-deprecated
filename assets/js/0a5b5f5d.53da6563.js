"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2186],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,k=d["".concat(u,".").concat(m)]||d[m]||s[m]||i;return n?r.createElement(k,l(l({ref:t},p),{},{components:n})):r.createElement(k,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6578:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return s},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return c}});var r=n(3117),a=(n(7294),n(3905));const i={sidebar_position:7},l="Math",o={unversionedId:"smart-contracts/math",id:"smart-contracts/math",title:"Math",description:"The math functions used by cosmwasm are based upon standard rust, but helper functions are provided for u128, u64 and",source:"@site/docs/04-smart-contracts/07-math.md",sourceDirName:"04-smart-contracts",slug:"/smart-contracts/math",permalink:"/docs/1.0/smart-contracts/math",draft:!1,editUrl:"https://github.com/InterWasm/docs/edit/main/docs/04-smart-contracts/07-math.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"docsSidebar",previous:{title:"Events",permalink:"/docs/1.0/smart-contracts/events"},next:{title:"Compilation",permalink:"/docs/1.0/smart-contracts/compilation"}},u={},c=[{value:"Uint128",id:"uint128",level:2},{value:"checked",id:"checked",level:3},{value:"saturating",id:"saturating",level:3},{value:"wrapping",id:"wrapping",level:3},{value:"Uint64",id:"uint64",level:2},{value:"checked",id:"checked-1",level:3},{value:"saturating",id:"saturating-1",level:3},{value:"wrapping",id:"wrapping-1",level:3},{value:"Decimal",id:"decimal",level:2}],p={toc:c};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"math"},"Math"),(0,a.kt)("p",null,"The math functions used by cosmwasm are based upon standard rust, but helper functions are provided for u128, u64 and\ndecimals."),(0,a.kt)("h2",{id:"uint128"},"Uint128"),(0,a.kt)("p",null,"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used\nfor clients that convert JSON numbers to floats, like JavaScript and jq."),(0,a.kt)("p",null,"Including in file:\n",(0,a.kt)("inlineCode",{parentName:"p"},"use cosmwasm_std::Uint128;")),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"from")," to create instances of this and ",(0,a.kt)("inlineCode",{parentName:"p"},"u128")," to get the value out:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Uint128(number)")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Uint128::new(number)")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Uint128::from(number u128/u64/u32/u16/u8)")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},'Uint128::try_from("34567")')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Uint128::zero()")),(0,a.kt)("h3",{id:"checked"},"checked"),(0,a.kt)("p",null,"All the checked math functions work with Unit128 variables: checked_add, checked_sub, checked_mul, checked_div,\nchecked_div_euclid, checked_rem"),(0,a.kt)("h3",{id:"saturating"},"saturating"),(0,a.kt)("p",null,"All the saturating math functions work with Unit128 variables: saturating_add, saturating_sub, saturating_mul,\nsaturating_pow"),(0,a.kt)("h3",{id:"wrapping"},"wrapping"),(0,a.kt)("p",null,"All the wrapping math functions work with Unit128 variables: wrapping_add, wrapping_sub, wrapping_mul, wrapping_pow"),(0,a.kt)("h2",{id:"uint64"},"Uint64"),(0,a.kt)("p",null,"A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for\nclients that convert JSON numbers to floats, like JavaScript and jq."),(0,a.kt)("p",null,"Including in file:\n",(0,a.kt)("inlineCode",{parentName:"p"},"use cosmwasm_std::Uint64;")),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"from")," to create instances of this and ",(0,a.kt)("inlineCode",{parentName:"p"},"u64")," to get the value out:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Uint64(number)")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Uint64::new(number)")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Uint64::from(number u64/u32/u16/u8)")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},'Uint64::try_from("34567")')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Uint64::zero()")),(0,a.kt)("h3",{id:"checked-1"},"checked"),(0,a.kt)("p",null,"All the checked math functions work with Uint64 variables: checked_add, checked_sub, checked_mul, checked_div,\nchecked_div_euclid, checked_rem"),(0,a.kt)("h3",{id:"saturating-1"},"saturating"),(0,a.kt)("p",null,"All the saturating math functions work with Uint64 variables: saturating_add, saturating_sub, saturating_mul,\nsaturating_pow"),(0,a.kt)("h3",{id:"wrapping-1"},"wrapping"),(0,a.kt)("p",null,"All the wrapping math functions work with Uint64 variables: wrapping_add, wrapping_sub, wrapping_mul, wrapping_pow"),(0,a.kt)("h2",{id:"decimal"},"Decimal"),(0,a.kt)("p",null,"A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0 The greatest\npossible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)"),(0,a.kt)("p",null,"Including in file:\n",(0,a.kt)("inlineCode",{parentName:"p"},"use cosmwasm_std::Decimal;")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},'Decimal::from_str("1234.567")')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Decimal::one()")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Decimal::zero()")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Decimal::percent(50)")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Decimal::permille(125)")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Decimal::from_ratio(1u128, 1u128)")))}s.isMDXComponent=!0}}]);