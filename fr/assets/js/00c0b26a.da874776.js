"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7185],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return u}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),u=o,f=m["".concat(l,".").concat(u)]||m[u]||d[u]||r;return t?a.createElement(f,i(i({ref:n},p),{},{components:t})):a.createElement(f,i({ref:n},p))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3155:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return r},metadata:function(){return s},toc:function(){return c}});var a=t(3117),o=(t(7294),t(3905));const r={sidebar_position:5},i="Develop dApp",s={unversionedId:"frontend-dapp/dapp-development",id:"frontend-dapp/dapp-development",title:"Develop dApp",description:"To showcase the previously explained utilities, we'll create the balance checker dApp from the template.",source:"@site/tutorials/frontend-dapp/dapp-development.md",sourceDirName:"frontend-dapp",slug:"/frontend-dapp/dapp-development",permalink:"/fr/tutorials/frontend-dapp/dapp-development",draft:!1,editUrl:"https://github.com/InterWasm/docs/edit/main/tutorials/frontend-dapp/dapp-development.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorials",previous:{title:"Bootstrap dApp",permalink:"/fr/tutorials/frontend-dapp/bootstrap-dapp"},next:{title:"Videos and Workshops",permalink:"/fr/tutorials/videos-workshops"}},l={},c=[{value:"Customize template",id:"customize-template",level:2},{value:"Add balance route",id:"add-balance-route",level:2},{value:"Balance path",id:"balance-path",level:3},{value:"React component",id:"react-component",level:3},{value:"Add to ProtectedSwitch",id:"add-to-protectedswitch",level:3},{value:"Add FormCheckBalance component",id:"add-formcheckbalance-component",level:2},{value:"Add Search component",id:"add-search-component",level:3},{value:"Add contract address validation schema",id:"add-contract-address-validation-schema",level:3},{value:"FormCheckBalance implementation",id:"formcheckbalance-implementation",level:3},{value:"Add TokenList component",id:"add-tokenlist-component",level:2},{value:"Finished!",id:"finished",level:2}],p={toc:c};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"develop-dapp"},"Develop dApp"),(0,o.kt)("p",null,"To showcase the previously explained utilities, we'll create the balance checker dApp from the template."),(0,o.kt)("h2",{id:"customize-template"},"Customize template"),(0,o.kt)("p",null,"To make the app your own, feel free to modify the ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," field in ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," and/or update the ",(0,o.kt)("inlineCode",{parentName:"p"},"README.md")," file."),(0,o.kt)("p",null,"Also modify the ",(0,o.kt)("inlineCode",{parentName:"p"},"routes/Login/index.tsx")," file to look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import {Login as LoginDesign} from "@cosmicdapp/design";\nimport React from "react";\nimport {config} from "../../../config";\nimport {pathBalance} from "../../paths";\nimport cosmWasmLogo from "./assets/cosmWasmLogo.svg";\n\nexport function Login(): JSX.Element {\n  return (\n    <LoginDesign\n      pathAfterLogin={pathBalance}\n      appName="Balance checker"\n      appLogo={cosmWasmLogo}\n      config={config}\n    />\n  );\n}\n\n')),(0,o.kt)("h2",{id:"add-balance-route"},"Add balance route"),(0,o.kt)("h3",{id:"balance-path"},"Balance path"),(0,o.kt)("p",null,"Add the following to the ",(0,o.kt)("inlineCode",{parentName:"p"},"paths.ts")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'export const pathBalance = "/balance";\n')),(0,o.kt)("h3",{id:"react-component"},"React component"),(0,o.kt)("p",null,"Inside ",(0,o.kt)("inlineCode",{parentName:"p"},"routes/"),", add a ",(0,o.kt)("inlineCode",{parentName:"p"},"Balance")," directory with the following files:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"index.tsx"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import {PageLayout, YourAccount} from "@cosmicdapp/design";\nimport {useError} from "@cosmicdapp/logic";\nimport {Typography} from "antd";\nimport React, {useState} from "react";\nimport {FormCheckBalance} from "./components/FormCheckBalance";\nimport {TokenList} from "./components/TokenList";\nimport {ErrorText, MainStack} from "./style";\n\nconst {Title} = Typography;\n\nexport function Balance(): JSX.Element {\n  const {error} = useError();\n  const [contractAddress, setContractAddress] = useState();\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <Title>Balance</Title>\n        <YourAccount hideTitle hideBalance/>\n        <FormCheckBalance setContractAddress={setContractAddress}/>\n        {error && <ErrorText>{error}</ErrorText>}\n        <TokenList contractAddress={contractAddress}/>\n      </MainStack>\n    </PageLayout>\n  );\n}\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"style.ts"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import {Stack} from "@cosmicdapp/design";\nimport {Typography} from "antd";\nimport styled from "styled-components";\n\nconst {Text} = Typography;\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n\n  h1 {\n    margin: 0;\n  }\n\n  .ant-form {\n    margin-top: var(--gap);\n  }\n`;\n\nexport const ErrorText = styled(Text)`\n  color: var(--color-red);\n`;\n')),(0,o.kt)("p",null,"As you can see, this two files make use of ",(0,o.kt)("inlineCode",{parentName:"p"},"@cosmicdapp/logic"),"'s ",(0,o.kt)("inlineCode",{parentName:"p"},"useError")," hook, and of ",(0,o.kt)("inlineCode",{parentName:"p"},"@cosmicdapp/design"),"'s ",(0,o.kt)("inlineCode",{parentName:"p"},"Stack"),"\n, ",(0,o.kt)("inlineCode",{parentName:"p"},"PageLayout"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"YourAccount")," components, so they should be familiar to you."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"index.tsx")," component's layout makes use of ",(0,o.kt)("inlineCode",{parentName:"p"},"MainStack")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ErrorText"),", which are Styled Components defined\nin ",(0,o.kt)("inlineCode",{parentName:"p"},"style.ts"),", and also of ",(0,o.kt)("inlineCode",{parentName:"p"},"FormCheckBalance")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"TokenList")," components, which are yet to be defined."),(0,o.kt)("p",null,"The logic will work like this: the ",(0,o.kt)("inlineCode",{parentName:"p"},"TokenList")," component will display the native tokens of the user, unless a contract\naddress is entered in ",(0,o.kt)("inlineCode",{parentName:"p"},"FormCheckBalance"),", which will make ",(0,o.kt)("inlineCode",{parentName:"p"},"TokenList")," show the balance for that CW20 contract, or show\nan error if that address does not have an associated contract."),(0,o.kt)("h3",{id:"add-to-protectedswitch"},"Add to ProtectedSwitch"),(0,o.kt)("p",null,"Your ",(0,o.kt)("inlineCode",{parentName:"p"},"ProtectedSwitch")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"App/index.tsx")," should look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"<ProtectedSwitch authPath={pathLogin}>\n  <Route exact path={pathBalance} component={Balance}/>\n</ProtectedSwitch>\n")),(0,o.kt)("p",null,"Note that we remove ",(0,o.kt)("inlineCode",{parentName:"p"},"OperationResult"),", both the route and the component, since we won't be making transactions in this\ndApp."),(0,o.kt)("h2",{id:"add-formcheckbalance-component"},"Add FormCheckBalance component"),(0,o.kt)("h3",{id:"add-search-component"},"Add Search component"),(0,o.kt)("p",null,"For entering the address we'll use a custom ",(0,o.kt)("inlineCode",{parentName:"p"},"Search")," component, it may seem hacky but does a good job\nintegrating ",(0,o.kt)("inlineCode",{parentName:"p"},"formik")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"antd"),", and is in fact inspired by ",(0,o.kt)("inlineCode",{parentName:"p"},"formik-antd")," (but it's missing there as of now)."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"App/forms/Search.tsx")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'// Search form not present in form-antd: https://github.com/jannikbuschke/formik-antd/blob/master/src/input/index.tsx\nimport {Input as BaseInput} from "antd";\nimport {InputProps as BaseInputProps, SearchProps as BaseSearchProps} from "antd/lib/input";\nimport {FieldProps} from "formik";\nimport {Field} from "formik-antd";\nimport * as React from "react";\nimport Search from "antd/lib/input/Search";\n\ninterface\nFormikFieldProps\n{\n  name: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  validate ? : (value: any) => undefined | string | Promise < any >;\n  fast ? : boolean;\n}\n\ntype\nInputProps = FormikFieldProps & BaseInputProps;\n\ninterface\nInputType\nextends\nReact.ForwardRefExoticComponent <\nFormikFieldProps & BaseInputProps & React.RefAttributes < BaseInput >\n> {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  Search: React.ForwardRefExoticComponent < FormikFieldProps & BaseSearchProps & React.RefAttributes < Search >>;\n}\n\n// eslint-disable-next-line react/display-name\nconst Input = React.forwardRef((\n  {name, validate, fast, onChange: $onChange, onBlur: $onBlur, ...restProps}: InputProps,\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  ref: React.Ref<Search>,\n) => (\n  <Field name={name} validate={validate} fast={fast}>\n    {({field: {value, onChange, onBlur}}: FieldProps) => (\n      <BaseInput\n        ref={ref}\n        name={name}\n        value={value}\n        onChange={(event) => {\n          onChange(event);\n          $onChange && $onChange(event);\n        }}\n        onBlur={(event) => {\n          onBlur(event);\n          $onBlur && $onBlur(event);\n        }}\n        {...restProps}\n      />\n    )}\n  </Field>\n));\n\nconst TypedInput = (Input\nas\nunknown\n)\nas\nInputType;\ntype\nSearchProps = FormikFieldProps & BaseSearchProps;\n\n// eslint-disable-next-line react/display-name\nTypedInput.Search = React.forwardRef(\n  (\n    {name, validate, fast, onChange: $onChange, onBlur: $onBlur, ...restProps}: SearchProps,\n    ref: React.Ref<BaseInput>,\n  ) => (\n    <Field name={name} validate={validate} fast={fast}>\n      {({field: {value, onChange, onBlur}}: FieldProps) => (\n        <BaseInput.Search\n          ref={ref}\n          name={name}\n          value={value}\n          onChange={(event) => {\n            onChange(event);\n            $onChange && $onChange(event);\n          }}\n          onBlur={(event) => {\n            onBlur(event);\n            $onBlur && $onBlur(event);\n          }}\n          {...restProps}\n        />\n      )}\n    </Field>\n  ),\n);\n\nexport default TypedInput.Search;\n')),(0,o.kt)("h3",{id:"add-contract-address-validation-schema"},"Add contract address validation schema"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"formik")," package we'll be using for building ",(0,o.kt)("inlineCode",{parentName:"p"},"FormCheckBalance")," has great integration with ",(0,o.kt)("inlineCode",{parentName:"p"},"yup"),", which allows us to\nuse it to build validation schemas like the one we need for the contract address:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"App/forms/validationSchemas.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import * as Yup from "yup";\nimport {config} from "../../config";\n\nconst regexStartsWithPrefix = new RegExp(`^${config.addressPrefix}`);\n\nconst addressShape = {\n  address: Yup.string()\n    .matches(regexStartsWithPrefix, `"${config.addressPrefix}" prefix required`)\n    .length(39 + config.addressPrefix.length, "Address invalid"),\n};\n\nexport const searchValidationSchema = Yup.object().shape(addressShape);\n')),(0,o.kt)("h3",{id:"formcheckbalance-implementation"},"FormCheckBalance implementation"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"routes/Balance/components/FormCheckBalance.tsx")," file would be this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import {Formik} from "formik";\nimport {Form, FormItem} from "formik-antd";\nimport React from "react";\nimport Search from "../../../forms/Search";\nimport {searchValidationSchema} from "../../../forms/validationSchemas";\n\ninterface\nFormCheckBalanceProps\n{\n  readonly\n  setContractAddress: (value: React.SetStateAction<string>) => void;\n}\n\nexport function FormCheckBalance({setContractAddress}: FormCheckBalanceProps): JSX.Element {\n  return (\n    <Formik\n      initialValues={{address: ""}}\n      validationSchema={searchValidationSchema}\n      onSubmit={(values) => {\n        setContractAddress(values.address);\n      }}\n    >\n      {(formikProps) => (\n        <Form>\n          <FormItem name="address">\n            <Search\n              name="address"\n              placeholder="Enter contract address"\n              enterButton\n              onSearch={formikProps.submitForm}\n            />\n          </FormItem>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n')),(0,o.kt)("p",null,"It uses the address validation schema defined before, and has a ",(0,o.kt)("inlineCode",{parentName:"p"},"setContractAddress")," param to update the state of\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"Balance")," route."),(0,o.kt)("h2",{id:"add-tokenlist-component"},"Add TokenList component"),(0,o.kt)("p",null,"With ",(0,o.kt)("inlineCode",{parentName:"p"},"FormCheckBalance")," working, we just need to implement ",(0,o.kt)("inlineCode",{parentName:"p"},"TokenList"),"."),(0,o.kt)("p",null,"This component will:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Check if there is a contract address:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If not, get the native balance from the ",(0,o.kt)("inlineCode",{parentName:"li"},"useAccount")," hook."),(0,o.kt)("li",{parentName:"ul"},"If yes, load the balance and the number of decimals for the CW20 contract token."),(0,o.kt)("li",{parentName:"ul"},"If address has no contract, show error.")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Display the balance:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Use the local ",(0,o.kt)("inlineCode",{parentName:"li"},"getCoinToDisplay()")," utility to get a user friendly format for balance, be it native or CW20."),(0,o.kt)("li",{parentName:"ul"},"Use the ",(0,o.kt)("inlineCode",{parentName:"li"},"showTokens")," flag for conditional rendering to avoid display issues when waiting for async data to load.")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"TokenList")," implementation for achieving this would be:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"routes/Balance/components/TokenList/index.tsx")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import {CW20, nativeCoinToDisplay, useAccount, useError, useSdk} from "@cosmicdapp/logic";\nimport {Coin, coins} from "@cosmjs/launchpad";\nimport {Decimal} from "@cosmjs/math";\nimport {Divider, Typography} from "antd";\nimport React, {useEffect, useState} from "react";\nimport {config} from "../../../../../config";\nimport {TokenItem, TokenStack} from "./style";\n\nconst {Text} = Typography;\n\ninterface\nTokenListProps\n{\n  readonly\n  contractAddress: string;\n}\n\nexport function TokenList({contractAddress}: TokenListProps): JSX.Element {\n  const {setError, clearError} = useError();\n  const {getClient} = useSdk();\n  const {account} = useAccount();\n\n  const [balance, setBalance] = useState < readonly\n  Coin[] > ([]);\n  const [decimals, setDecimals] = useState < number > ();\n\n  useEffect(() => {\n    if (!contractAddress) {\n      setBalance(account.balance);\n      setDecimals(undefined);\n      clearError();\n      return;\n    }\n\n    const client = getClient();\n\n    (async function updateBalance() {\n      try {\n        const contract = await client.getContract(contractAddress);\n        const cw20Contract = CW20(client).use(contract.address);\n        const [{symbol: denom, decimals}, balance] = await Promise.all([\n          cw20Contract.tokenInfo(),\n          cw20Contract.balance(),\n        ]);\n        const amount = parseInt(balance, 10);\n\n        setBalance(coins(amount, denom));\n        setDecimals(decimals);\n        clearError();\n      } catch {\n        setError("No contract found in that address");\n        setBalance([]);\n        setDecimals(undefined);\n      }\n    })();\n  }, [account.balance, getClient, contractAddress, clearError, setError]);\n\n  function getCoinToDisplay(coin: Coin): Coin {\n    if (contractAddress && decimals) {\n      const amountFromDecimal = Decimal.fromAtomics(coin.amount, decimals).toString();\n      return {denom: coin.denom, amount: amountFromDecimal};\n    }\n\n    return nativeCoinToDisplay(coin, config.coinMap);\n  }\n\n  const isCw20Token = contractAddress && decimals !== undefined;\n  const isNativeToken = !contractAddress && decimals === undefined;\n  const showTokens = isCw20Token || isNativeToken;\n\n  return (\n    showTokens && (\n      <TokenStack>\n        {balance.map((token, index) => {\n          const {denom, amount} = getCoinToDisplay(token);\n\n          return (\n            <React.Fragment key={token.denom}>\n              {index > 0 && <Divider/>}\n              <TokenItem>\n                <Text>{denom}</Text>\n                <Text>{amount !== "0" ? amount : "No tokens"}</Text>\n              </TokenItem>\n            </React.Fragment>\n          );\n        })}\n      </TokenStack>\n    )\n  );\n}\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"routes/Balance/components/TokenList/style.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import {Stack} from "@cosmicdapp/design";\nimport styled from "styled-components";\n\nexport const TokenStack = styled(Stack)`\n  & > * {\n    --gap: 0;\n  }\n`;\n\nexport const TokenItem = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n\n  span {\n    font-family: var(--ff-iceland);\n    font-size: var(--s2);\n  }\n\n  span + span {\n    font-weight: bolder;\n    font-family: var(--ff-montserrat);\n    font-size: var(--s1);\n  }\n`;\n')),(0,o.kt)("h2",{id:"finished"},"Finished!"),(0,o.kt)("p",null,"Now you can check your native balances and your balance for any CW20 contract, and most importantly, you now know how to\nbuild a CosmJS based dApp!"))}d.isMDXComponent=!0}}]);