"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5667],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(t),d=o,f=p["".concat(c,".").concat(d)]||p[d]||m[d]||s;return t?r.createElement(f,a(a({ref:n},u),{},{components:t})):r.createElement(f,a({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,a=new Array(s);a[0]=p;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var l=2;l<s;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4211:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return a},default:function(){return m},frontMatter:function(){return s},metadata:function(){return i},toc:function(){return l}});var r=t(3117),o=(t(7294),t(3905));const s={sidebar_position:4},a="Testing",i={unversionedId:"simple-option/testing",id:"simple-option/testing",title:"Testing",description:"At this point your code should be compiling, although we did not test if it works. You can deploy the code to the chain",source:"@site/tutorials/simple-option/testing.md",sourceDirName:"simple-option",slug:"/simple-option/testing",permalink:"/fr/tutorials/simple-option/testing",draft:!1,editUrl:"https://github.com/InterWasm/docs/edit/main/tutorials/simple-option/testing.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorials",previous:{title:"Develop Contract",permalink:"/fr/tutorials/simple-option/develop"},next:{title:"Next Steps",permalink:"/fr/tutorials/simple-option/next-steps"}},c={},l=[{value:"Test Initialization",id:"test-initialization",level:2},{value:"Mock Dependencies, Environment, and Message Info",id:"mock-dependencies-environment-and-message-info",level:3},{value:"Test Handler",id:"test-handler",level:2},{value:"Test Transfer Handler",id:"test-transfer-handler",level:3},{value:"Test Execute",id:"test-execute",level:3}],u={toc:l};function m(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"testing"},"Testing"),(0,o.kt)("iframe",{src:"https://player.vimeo.com/video/457705991",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen",allowfullscreen:!0}),(0,o.kt)("p",null,"At this point your code should be compiling, although we did not test if it works. You can deploy the code to the chain\neverytime when you make a change. But come on, your time is more valuable than that. Also, good to keep the contract\nbreak-free and tested for future changes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[cfg(test)]\nmod tests {\n  use super::*;\n  use cosmwasm_std::testing::{mock_dependencies, mock_env, mock_info, MOCK_CONTRACT_ADDR};\n  use cosmwasm_std::{attr, coins, CosmosMsg};\n")),(0,o.kt)("p",null,"This is how testing in Rust\nbegins. ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cw-examples/blob/main/contracts/simple-option/src/contract.rs"},"Code reference"),". You\ncan keep test and code in the same or separate files."),(0,o.kt)("h2",{id:"test-initialization"},"Test Initialization"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"}," Timecode ",(0,o.kt)("a",{parentName:"p",href:"https://vimeo.com/457705991#t=3m34s"},"https://vimeo.com/457705991#t=3m34s"))),(0,o.kt)("p",null,"For each test, test specific variables such as block time, state must be mocked. Write a function for easy setup."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#[test]\nfn proper_initialization() {\n  let mut deps = mock_dependencies(&[]);\n\n  let msg = InitMsg {\n    counter_offer: coins(40, "ETH"),\n    expires: 100_000,\n  };\n  let info = mock_info("creator", &coins(1, "BTC"));\n\n  // we can just call .unwrap() to assert this was a success\n  let res = init(deps.as_mut(), mock_env(), info, msg).unwrap();\n  assert_eq!(0, res.messages.len());\n\n  // it worked, let\'s query the state\n  let res = query_config(deps.as_ref()).unwrap();\n  assert_eq!(100_000, res.expires);\n  assert_eq!("creator", res.owner.as_str());\n  assert_eq!("creator", res.creator.as_str());\n  assert_eq!(coins(1, "BTC"), res.collateral);\n  assert_eq!(coins(40, "ETH"), res.counter_offer);\n}\n')),(0,o.kt)("p",null,"Good we now have a test environment initializer. This is a very simple one, you can pass in variables to the function\nand do different tweaks. Check cosmwasm-plus for more."),(0,o.kt)("h3",{id:"mock-dependencies-environment-and-message-info"},"Mock Dependencies, Environment, and Message Info"),(0,o.kt)("p",null,"There are three mocking tools we should improve on:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// All external requirements that can be injected for unit tests.\n/// It sets the given balance for the contract itself, nothing else\npub fn mock_dependencies(\n  contract_balance: &[Coin],\n) -> OwnedDeps<MockStorage, MockApi, MockQuerier> {\n  let contract_addr = HumanAddr::from(MOCK_CONTRACT_ADDR);\n  OwnedDeps {\n    storage: MockStorage::default(),\n    api: MockApi::default(),\n    querier: MockQuerier::new(&[(&contract_addr, contract_balance)]),\n  }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"mock_dependencies")," is for mocking storage, api, and querier."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'/// Returns a default enviroment with height, time, chain_id, and contract address\n/// You can submit as is to most contracts, or modify height/time if you want to\n/// test for expiration.\n///\n/// This is intended for use in test code only.\npub fn mock_env() -> Env {\n  Env {\n    block: BlockInfo {\n      height: 12_345,\n      time: 1_571_797_419,\n      time_nanos: 879305533,\n      chain_id: "cosmos-testnet-14002".to_string(),\n    },\n    contract: ContractInfo {\n      address: HumanAddr::from(MOCK_CONTRACT_ADDR),\n    },\n  }\n}\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"mock_env")," is for mocking block, and contract environment."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Just set sender and sent funds for the message. The essential for\n/// This is intended for use in test code only.\npub fn mock_info<U: Into<HumanAddr>>(sender: U, sent: &[Coin]) -> MessageInfo {\n  MessageInfo {\n    sender: sender.into(),\n    sent_funds: sent.to_vec(),\n  }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"mock_info")," is for mocking transaction environment."),(0,o.kt)("h2",{id:"test-handler"},"Test Handler"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"}," Timecode ",(0,o.kt)("a",{parentName:"p",href:"https://vimeo.com/457705991#t=7m34s"},"https://vimeo.com/457705991#t=7m34s"))),(0,o.kt)("h3",{id:"test-transfer-handler"},"Test Transfer Handler"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#[test]\nfn transfer() {\n  let mut deps = mock_dependencies(&[]);\n\n  let msg = InitMsg {\n    counter_offer: coins(40, "ETH"),\n    expires: 100_000,\n  };\n  let info = mock_info("creator", &coins(1, "BTC"));\n\n  // we can just call .unwrap() to assert this was a success\n  let res = init(deps.as_mut(), mock_env(), info, msg).unwrap();\n  assert_eq!(0, res.messages.len());\n\n  // random cannot transfer\n  let info = mock_info("anyone", &[]);\n  let err = handle_transfer(deps.as_mut(), mock_env(), info, HumanAddr::from("anyone"))\n    .unwrap_err();\n  match err {\n    ContractError::Unauthorized {} => {}\n    e => panic!("unexpected error: {}", e),\n  }\n\n  // owner can transfer\n  let info = mock_info("creator", &[]);\n  let res =\n    handle_transfer(deps.as_mut(), mock_env(), info, HumanAddr::from("someone")).unwrap();\n  assert_eq!(res.attributes.len(), 2);\n  assert_eq!(res.attributes[0], attr("action", "transfer"));\n\n  // check updated properly\n  let res = query_config(deps.as_ref()).unwrap();\n  assert_eq!("someone", res.owner.as_str());\n  assert_eq!("creator", res.creator.as_str());\n}\n')),(0,o.kt)("h3",{id:"test-execute"},"Test Execute"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"}," Timecode ",(0,o.kt)("a",{parentName:"p",href:"https://vimeo.com/457705991#t=14m21s"},"https://vimeo.com/457705991#t=14m21s"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#[test]\nfn execute() {\n  let mut deps = mock_dependencies(&[]);\n\n  let amount = coins(40, "ETH");\n  let collateral = coins(1, "BTC");\n  let expires = 100_000;\n  let msg = InitMsg {\n    counter_offer: amount.clone(),\n    expires: expires,\n  };\n  let info = mock_info("creator", &collateral);\n\n  // we can just call .unwrap() to assert this was a success\n  let _ = init(deps.as_mut(), mock_env(), info, msg).unwrap();\n\n  // set new owner\n  let info = mock_info("creator", &[]);\n  let _ = handle_transfer(deps.as_mut(), mock_env(), info, HumanAddr::from("owner")).unwrap();\n\n  // random cannot execute\n  let info = mock_info("creator", &amount);\n  let err = handle_execute(deps.as_mut(), mock_env(), info).unwrap_err();\n  match err {\n    ContractError::Unauthorized {} => {}\n    e => panic!("unexpected error: {}", e),\n  }\n\n  // expired cannot execute\n  let info = mock_info("owner", &amount);\n  let mut env = mock_env();\n  env.block.height = 200_000;\n  let err = handle_execute(deps.as_mut(), env, info).unwrap_err();\n  match err {\n    ContractError::OptionExpired { expired } => assert_eq!(expired, expires),\n    e => panic!("unexpected error: {}", e),\n  }\n\n  // bad counter_offer cannot execute\n  let msg_offer = coins(39, "ETH");\n  let info = mock_info("owner", &msg_offer);\n  let err = handle_execute(deps.as_mut(), mock_env(), info).unwrap_err();\n  match err {\n    ContractError::CounterOfferMismatch {\n      offer,\n      counter_offer,\n    } => {\n      assert_eq!(msg_offer, offer);\n      assert_eq!(amount, counter_offer);\n    }\n    e => panic!("unexpected error: {}", e),\n  }\n\n  // proper execution\n  let info = mock_info("owner", &amount);\n  let res = handle_execute(deps.as_mut(), mock_env(), info).unwrap();\n  assert_eq!(res.messages.len(), 2);\n  assert_eq!(\n    res.messages[0],\n    CosmosMsg::Bank(BankMsg::Send {\n      from_address: MOCK_CONTRACT_ADDR.into(),\n      to_address: "creator".into(),\n      amount,\n    })\n  );\n  assert_eq!(\n    res.messages[1],\n    CosmosMsg::Bank(BankMsg::Send {\n      from_address: MOCK_CONTRACT_ADDR.into(),\n      to_address: "owner".into(),\n      amount: collateral,\n    })\n  );\n\n  // check deleted\n  let _ = query_config(deps.as_ref()).unwrap_err();\n}\n')),(0,o.kt)("p",null,"Now run the tests:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cargo test\n")),(0,o.kt)("p",null,"If all green, the code will run work on chain."))}m.isMDXComponent=!0}}]);