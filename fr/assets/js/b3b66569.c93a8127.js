"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4901],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),m=o,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var u=2;u<i;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},787:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return r},default:function(){return d},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u}});var a=n(3117),o=(n(7294),n(3905));const i={sidebar_position:2},r="Installation",s={unversionedId:"getting-started/installation",id:"version-0.16/getting-started/installation",title:"Installation",description:"In this section, we will set up your machine for developing, deploying and, hopefully, enjoying smart contracts on",source:"@site/docs_versioned_docs/version-0.16/02-getting-started/02-installation.md",sourceDirName:"02-getting-started",slug:"/getting-started/installation",permalink:"/fr/docs/0.16/getting-started/installation",draft:!1,editUrl:"https://github.com/InterWasm/docs/edit/main/docs_versioned_docs/version-0.16/02-getting-started/02-installation.md",tags:[],version:"0.16",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"version-0.16/docsSidebar",previous:{title:"Your First Contract",permalink:"/fr/docs/0.16/getting-started/intro"},next:{title:"Setting Up Environment",permalink:"/fr/docs/0.16/getting-started/setting-env"}},l={},u=[{value:"Go",id:"go",level:2},{value:"Rust",id:"rust",level:2},{value:"Installing Rust in Linux and Mac",id:"installing-rust-in-linux-and-mac",level:3},{value:"Installing Rust in Windows 10",id:"installing-rust-in-windows-10",level:3},{value:"wasmd",id:"wasmd",level:2},{value:"Further Information on the Cosmos SDK",id:"further-information-on-the-cosmos-sdk",level:2},{value:"Setting up your IDE",id:"setting-up-your-ide",level:2}],p={toc:u};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"installation"},"Installation"),(0,o.kt)("p",null,"In this section, we will set up your machine for developing, deploying and, hopefully, enjoying smart contracts on\nCosmos SDK chains."),(0,o.kt)("h2",{id:"go"},"Go"),(0,o.kt)("p",null,"You can set up golang following the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/golang/go/wiki#working-with-go"},"official documentation"),". The\nlatest versions of ",(0,o.kt)("inlineCode",{parentName:"p"},"wasmd")," require go version ",(0,o.kt)("inlineCode",{parentName:"p"},"v1.16.8"),"."),(0,o.kt)("h2",{id:"rust"},"Rust"),(0,o.kt)("p",null,"Assuming you have never worked with rust, you will first need to install some tooling. The standard approach is to\nuse ",(0,o.kt)("inlineCode",{parentName:"p"},"rustup")," to maintain dependencies and handle updating multiple versions of\n",(0,o.kt)("inlineCode",{parentName:"p"},"cargo")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"rustc"),", which you will be using."),(0,o.kt)("h3",{id:"installing-rust-in-linux-and-mac"},"Installing Rust in Linux and Mac"),(0,o.kt)("p",null,"First, ",(0,o.kt)("a",{parentName:"p",href:"https://rustup.rs/"},"install rustup"),". Once installed, make sure you have the wasm32 target:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"rustup default stable\ncargo version\n# If this is lower than 1.51.0+, update\nrustup update stable\n\nrustup target list --installed\nrustup target add wasm32-unknown-unknown\n")),(0,o.kt)("h3",{id:"installing-rust-in-windows-10"},"Installing Rust in Windows 10"),(0,o.kt)("p",null,"First, download and execute ",(0,o.kt)("inlineCode",{parentName:"p"},"rustup-init.exe")," from ",(0,o.kt)("a",{parentName:"p",href:"https://rustup.rs/"},"rustup.rs"),"\nor ",(0,o.kt)("a",{parentName:"p",href:"https://www.rust-lang.org/tools/install"},"rust-lang.org"),"."),(0,o.kt)("p",null,"If requested, manually download and install Visual C++ Build Tools 2019,\nfrom ",(0,o.kt)("a",{parentName:"p",href:"https://visualstudio.microsoft.com/visual-cpp-build-tools/"},"https://visualstudio.microsoft.com/visual-cpp-build-tools/"),' . Make sure "Windows 10 SDK" and "English language pack"\nare selected.'),(0,o.kt)("p",null,"Continue running ",(0,o.kt)("inlineCode",{parentName:"p"},"rustup-init.exe"),", and proceed with the installation."),(0,o.kt)("p",null,"Optionally:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Download and install ",(0,o.kt)("a",{parentName:"li",href:"https://www.vim.org/download.php#pc"},"gvim"),", and modify the Env vars to add \\<gvim folder",">"," to\nthe PATH."),(0,o.kt)("li",{parentName:"ul"},"Download and install ",(0,o.kt)("a",{parentName:"li",href:"https://git-scm.com/download/win"},"git for windows"),". Modify the Env vars to add \\<git\nfolder",">","\\bin to PATH."),(0,o.kt)("li",{parentName:"ul"},"Turn on Developer Mode (Settings -> Update and Security: For Developers) and enable Device Discovery, to be able to\naccess the Windows 10 server through\nssh (",(0,o.kt)("a",{parentName:"li",href:"https://www.ctrl.blog/entry/how-to-win10-ssh-service.html#section-mssshserv-enable"},"https://www.ctrl.blog/entry/how-to-win10-ssh-service.html#section-mssshserv-enable"),").")),(0,o.kt)("p",null,"Install the wasm32 target:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"rustup default stable\ncargo version\n# If this is lower than 1.53.0, update\nrustup update stable\n\nrustup target list --installed\nrustup target add wasm32-unknown-unknown\n")),(0,o.kt)("p",null,"For those new to rust, the ",(0,o.kt)("inlineCode",{parentName:"p"},"stable")," channel comes out every 6 weeks with a stable release. The ",(0,o.kt)("inlineCode",{parentName:"p"},"nightly")," channel is the\nbleeding edge and not only is it a version or two ahead (for testing), but it allows some extra unstable features, whose\nAPIs may change. For compiling ",(0,o.kt)("inlineCode",{parentName:"p"},"wasm"),", you will want to use ",(0,o.kt)("inlineCode",{parentName:"p"},"stable"),". We use ",(0,o.kt)("inlineCode",{parentName:"p"},"nightly")," to compile the runtime\nfor ",(0,o.kt)("inlineCode",{parentName:"p"},"wasmd"),", which needs it for the singlepass compiler with gas metering and more."),(0,o.kt)("h2",{id:"wasmd"},"wasmd"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"wasmd")," is the backbone of CosmWasm platform. It is the implementation of a Cosmoszone with wasm smart contracts\nenabled."),(0,o.kt)("p",null,"This code was forked from the ",(0,o.kt)("inlineCode",{parentName:"p"},"cosmos/gaia")," repository as a basis and then added x/wasm and cleaned up many\ngaia-specific files. However, the wasmd binary should function just like gaiad except for the addition of the x/wasm\nmodule."),(0,o.kt)("p",null,"If you intend to develop or edit a contract, you need wasmd."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/CosmWasm/wasmd.git\ncd wasmd\n# replace the v0.18.0 with the most stable version on https://github.com/CosmWasm/wasmd/releases\ngit checkout v0.18.0\nmake install\n\n# verify the installation\nwasmd version\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"If you have any problems here, check your ",(0,o.kt)("inlineCode",{parentName:"p"},"PATH"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"make install")," will copy ",(0,o.kt)("inlineCode",{parentName:"p"},"wasmd")," to\n",(0,o.kt)("inlineCode",{parentName:"p"},"$HOME/go/bin")," by default, please make sure that is set up in your ",(0,o.kt)("inlineCode",{parentName:"p"},"PATH")," as well, which should be the case in general\nfor building Go code from source.")),(0,o.kt)("h2",{id:"further-information-on-the-cosmos-sdk"},"Further Information on the Cosmos SDK"),(0,o.kt)("p",null,"These represent an instance of a blockchain that utilizes all of the stable features of\nthe ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk"},"Cosmos SDK"),". As such, ",(0,o.kt)("inlineCode",{parentName:"p"},"wasmd")," have all the same features (plus WASM smart\ncontracts obviously). If you'd like to learn more about accessing those features take a look at\nthe ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cosmos/gaia/tree/main/docs/gaia-tutorials"},"Gaia docs"),". If you'd like to learn more about getting\nstarted with the Cosmos SDK in general, take a look at the series of ",(0,o.kt)("a",{parentName:"p",href:"https://tutorials.cosmos.network/"},"Tutorials")," that\nshow how to build custom modules for application-specific blockchains."),(0,o.kt)("h2",{id:"setting-up-your-ide"},"Setting up your IDE"),(0,o.kt)("p",null,"We will need a good editor to guide us through the experience. We highly recommend plugins that help you learn syntax,\nespecially when just starting rust. There are two free editor environments we recommend, choose the one that is more\nfamiliar to you."),(0,o.kt)("p",null,"If you use VSCode (",(0,o.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/download"},"Download link"),") you just need to add the rust plugin. This\nis the best supported environment for RLS (Rust Language Server) and uses the rust compiler to type-check all your code\non save. This gives the same error messages as the actual compiler would and highlights along the line of the code, but\nit can be a bit slow to respond (as it runs the compiler). It is a solid option, particularly if you are used to VSCode."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=rust-lang.rust"},"RLS for VSCode")),(0,o.kt)("p",null,"The other option is Intellij IDEA Community Edition (",(0,o.kt)("a",{parentName:"p",href:"https://www.jetbrains.com/idea/download/"},"Download link"),"), along\nwith the Rust Plugin. This has fast support for inline language features. In particular, it shows the inferred types of\nvariables, which can be very helpful, especially when working with (nested) generics. It catches most syntax errors very\nquickly, but not all of them. This means sometimes you have to look at compile failures to find the errors. If you are\ncoming from another Intellij product (eg. Goland), use this:"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://intellij-rust.github.io/"},"RUST for Intellij")),(0,o.kt)("p",null,"There are many more editors out there and some have varying degrees of rust support, at least syntax highlighting, but\nunless you have a strong preference to another editor (e.g. Sublime, Emacs, Vim) trying one of the two above is\nrecommended, especially if you are new to rust. Once you are confident in the language, you can always use another\neditor and customize it to your liking."))}d.isMDXComponent=!0}}]);