"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2773],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>u});var a=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,a)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,a,n=function(e,t){if(null==e)return{};var o,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)o=r[a],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)o=r[a],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var o=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(o),u=n,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||r;return o?a.createElement(h,i(i({ref:t},p),{},{components:o})):a.createElement(h,i({ref:t},p))}));function u(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=o.length,i=new Array(r);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var c=2;c<r;c++)i[c]=o[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,o)}d.displayName="MDXCreateElement"},954:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=o(7462),n=(o(7294),o(3905));const r={sidebar_position:1,id:"cosmwasm-ide"},i="CosmWasm IDE Tutorial",s={unversionedId:"tutorials/cosmwasm-ide",id:"tutorials/cosmwasm-ide",title:"CosmWasm IDE Tutorial",description:"CosmosWasm IDE - An open-source project for CosmWasm smart contract developers. Powered by Oraichain & CosmWasm",source:"@site/docs/06-tutorials/01-cosmwasm-ide.md",sourceDirName:"06-tutorials",slug:"/tutorials/cosmwasm-ide",permalink:"/fr/docs/tutorials/cosmwasm-ide",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"cosmwasm-ide"},sidebar:"defaultSidebar",previous:{title:"Smart contract as an actor",permalink:"/fr/docs/actor-model/actor-in-blokchain"}},l={},c=[{value:"Steps",id:"steps",level:2},{value:"1. Setting up the CosmWasm IDE development environment",id:"1-setting-up-the-cosmwasm-ide-development-environment",level:3},{value:"2. Create a smart contract project (optional).",id:"2-create-a-smart-contract-project-optional",level:3},{value:"3. Choose an arbitrary file in the project.",id:"3-choose-an-arbitrary-file-in-the-project",level:3},{value:"4. Use VSCode CosmWasm extension to build, deploy, and interact with the smart contract.",id:"4-use-vscode-cosmwasm-extension-to-build-deploy-and-interact-with-the-smart-contract",level:3},{value:"5. Interacting with the IDE webview",id:"5-interacting-with-the-ide-webview",level:3}],p={toc:c};function m(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"cosmwasm-ide-tutorial"},"CosmWasm IDE Tutorial"),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/oraichain/vscode-cosmwasm/docs/contributing/public/cosmos-ide.png",alt:"CosmosWasm IDE - An open-source project for CosmWasm smart contract developers. Powered by Oraichain & CosmWasm"})),(0,n.kt)("h2",{id:"steps"},"Steps"),(0,n.kt)("h3",{id:"1-setting-up-the-cosmwasm-ide-development-environment"},"1. Setting up the CosmWasm IDE development environment"),(0,n.kt)("p",null,"To setup your workspace with all the neccessary tools & libraries for developing the CosmWasm smart contracts, please click button ",(0,n.kt)("inlineCode",{parentName:"p"},"Open in Gitpod")," below. Gitpod will automatically install everything you need to deploy a smart contract."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://gitpod.io/#https://github.com/oraichain/cosmwasm-gitpod"},(0,n.kt)("img",{parentName:"a",src:"https://gitpod.io/button/open-in-gitpod.svg",alt:"Open in Gitpod"}))),(0,n.kt)("h3",{id:"2-create-a-smart-contract-project-optional"},"2. Create a smart contract project (optional)."),(0,n.kt)("p",null,"After your workspace is ready, follow the next steps."),(0,n.kt)("p",null,"You can use the command below to get a CosmWasm scaffold project "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cd package/ && git clone https://github.com/oraichain/oraiwasm_scaffold.git && cd -\n")),(0,n.kt)("h3",{id:"3-choose-an-arbitrary-file-in-the-project"},"3. Choose an arbitrary file in the project."),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/oraichain/cosmwasm-gitpod/master/docs/assets/choose-a-file.png",alt:"Choose an arbitrary file"})),(0,n.kt)("h3",{id:"4-use-vscode-cosmwasm-extension-to-build-deploy-and-interact-with-the-smart-contract"},"4. Use VSCode CosmWasm extension to build, deploy, and interact with the smart contract."),(0,n.kt)("p",null,"The extension provides four custom VS Code buttons: ",(0,n.kt)("inlineCode",{parentName:"p"},"Build CosmWasm"),",  ",(0,n.kt)("inlineCode",{parentName:"p"},"Deploy CosmWasm"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"Upload CosmWasm")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"Instantiate CosmWasm")," under the status bar of Vs Code and a ",(0,n.kt)("inlineCode",{parentName:"p"},"CosmWasm IDE Explorer")," under the ",(0,n.kt)("inlineCode",{parentName:"p"},"Explorer")," tab of VS Code."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Build CosmWasm")," button will build the smart contract to the .wasm file based on the file you open in VS Code."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Deploy Cosmwasm")," button will deploy your contract onto a network that you choose on the CosmWasm IDE explorer."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Upload CosmWasm")," button will upload your smart contract code."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Instantiate CosmWasm")," button will instantiate your smart contract given a code id.")),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/oraichain/cosmwasm-gitpod/master/docs/assets/status-bar.png",alt:"VSCode's status bar"})),(0,n.kt)("p",null,"Please note that the IDE will read all the json schemas of a project from the location ",(0,n.kt)("inlineCode",{parentName:"p"},"${project_root_path}/artifacts/schema")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"${project_root_path}/schema"),". "),(0,n.kt)("p",null,"As a result, if the schemas are in a different location, the IDE will not be able to move to the next page."),(0,n.kt)("h3",{id:"5-interacting-with-the-ide-webview"},"5. Interacting with the IDE webview"),(0,n.kt)("p",null,"After deploying or instantiating, the webview will display the deployed contract address & two interaction options: Execute & Query. You can freely play with it to suit your needs."),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/oraichain/cosmwasm-gitpod/master/docs/assets/interaction.png",alt:"Contract interaction"})))}m.isMDXComponent=!0}}]);