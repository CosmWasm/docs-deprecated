"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3744],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),d=i,k=c["".concat(p,".").concat(d)]||c[d]||m[d]||r;return n?a.createElement(k,o(o({ref:t},u),{},{components:n})):a.createElement(k,o({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9530:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return s}});var a=n(3117),i=(n(7294),n(3905));const r={title:"CW1155 Spec"},o="CW1155 Spec: Multiple Tokens",l={unversionedId:"cw1155/spec",id:"cw1155/spec",title:"CW1155 Spec",description:"Repo",source:"@site/cw-plus/cw1155/spec.md",sourceDirName:"cw1155",slug:"/cw1155/spec",permalink:"/fr/cw-plus/0.9.0/cw1155/spec",draft:!1,editUrl:"https://github.com/InterWasm/docs/edit/main/cw-plus/cw1155/spec.md",tags:[],version:"current",frontMatter:{title:"CW1155 Spec"},sidebar:"cwPlus",previous:{title:"CW4 Stake",permalink:"/fr/cw-plus/0.9.0/cw4/cw4-stake-spec"}},p={},s=[{value:"Base",id:"base",level:2},{value:"Messages",id:"messages",level:3},{value:"Queries",id:"queries",level:3},{value:"Receiver",id:"receiver",level:3},{value:"Events",id:"events",level:3},{value:"Metadata",id:"metadata",level:2},{value:"Queries",id:"queries-1",level:3},{value:"Events",id:"events-1",level:3},{value:"Enumerable",id:"enumerable",level:2},{value:"Queries",id:"queries-2",level:3}],u={toc:s};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"cw1155-spec-multiple-tokens"},"CW1155 Spec: Multiple Tokens"),(0,i.kt)("p",null,"Repo\nlink: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cw-plus/tree/main/packages/cw1155"},"https://github.com/CosmWasm/cw-plus/tree/main/packages/cw1155")),(0,i.kt)("p",null,"CW1155 is a specification for managing multiple tokens based on CosmWasm.\nThe name and design is based on Ethereum's ERC1155 standard."),(0,i.kt)("p",null,"The specification is split into multiple sections, a contract may only\nimplement some of this functionality, but must implement the base."),(0,i.kt)("p",null,"Fungible tokens and non-fungible tokens are treated equally, non-fungible tokens just have one max supply."),(0,i.kt)("p",null,"Approval is set or unset to some operator over entire set of tokens. (More nuanced control is defined in\n",(0,i.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-1761"},"ERC1761"),")"),(0,i.kt)("h2",{id:"base"},"Base"),(0,i.kt)("h3",{id:"messages"},"Messages"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"SendFrom{from, to, token_id, value, msg}")," - This transfers some amount of tokens between two accounts. If ",(0,i.kt)("inlineCode",{parentName:"p"},"to")," is an\naddress controlled by a smart contract, it must implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"CW1155Receiver")," interface, ",(0,i.kt)("inlineCode",{parentName:"p"},"msg")," will be passed to it\nalong with other fields, otherwise, ",(0,i.kt)("inlineCode",{parentName:"p"},"msg")," should be ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),". The operator should either be the ",(0,i.kt)("inlineCode",{parentName:"p"},"from")," account or have\napproval from it."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"BatchSendFrom{from, to, batch: Vec<(token_id, value)>, msg}")," - Batched version of ",(0,i.kt)("inlineCode",{parentName:"p"},"SendFrom")," which can handle multiple\ntypes of tokens at once."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Mint {to, token_id, value, msg}")," - This mints some tokens to ",(0,i.kt)("inlineCode",{parentName:"p"},"to")," account, If ",(0,i.kt)("inlineCode",{parentName:"p"},"to")," is controlled by a smart contract,\nit should implement ",(0,i.kt)("inlineCode",{parentName:"p"},"CW1155Receiver")," interface, ",(0,i.kt)("inlineCode",{parentName:"p"},"msg")," will be passed to it along with other fields, otherwise, ",(0,i.kt)("inlineCode",{parentName:"p"},"msg"),"\nshould be ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"BatchMint {to, batch: Vec<(token_id, value)>, msg}")," - Batched version of ",(0,i.kt)("inlineCode",{parentName:"p"},"Mint"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Burn {from, token_id, value}")," - This burns some tokens from ",(0,i.kt)("inlineCode",{parentName:"p"},"from")," account."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"BatchBurn {from, batch: Vec<(token_id, value)>}")," - Batched version of ",(0,i.kt)("inlineCode",{parentName:"p"},"Burn"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ApproveAll{ operator, expires }")," - Allows operator to transfer / send any token from the owner's account. If expiration\nis set, then this allowance has a time/height limit."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"RevokeAll { operator }")," - Remove previously granted ApproveAll permission"),(0,i.kt)("h3",{id:"queries"},"Queries"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Balance { owner, token_id }")," - Query the balance of ",(0,i.kt)("inlineCode",{parentName:"p"},"owner")," on particular type of token, default to ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," when record not\nexist."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"BatchBalance { owner, token_ids }")," - Query the balance of ",(0,i.kt)("inlineCode",{parentName:"p"},"owner")," on multiple types of tokens, batched version of\n",(0,i.kt)("inlineCode",{parentName:"p"},"Balance"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ApprovedForAll{owner, include_expired, start_after, limit}")," - List all operators that can access all of the owner's\ntokens. Return type is ",(0,i.kt)("inlineCode",{parentName:"p"},"ApprovedForAllResponse"),".  If ",(0,i.kt)("inlineCode",{parentName:"p"},"include_expired")," is set, show expired owners in the results,\notherwise, ignore them."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"IsApprovedForAll{owner, operator}")," - Query approved status ",(0,i.kt)("inlineCode",{parentName:"p"},"owner")," granted to ",(0,i.kt)("inlineCode",{parentName:"p"},"operator"),". Return type is\n",(0,i.kt)("inlineCode",{parentName:"p"},"IsApprovedForAllResponse"),"."),(0,i.kt)("h3",{id:"receiver"},"Receiver"),(0,i.kt)("p",null,"Any contract wish to receive CW1155 tokens must implement ",(0,i.kt)("inlineCode",{parentName:"p"},"Cw1155ReceiveMsg")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Cw1155BatchReceiveMsg"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Cw1155ReceiveMsg { operator, from, token_id, amount, msg}")," - "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Cw1155BatchReceiveMsg { operator, from, batch, msg}")," - "),(0,i.kt)("h3",{id:"events"},"Events"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"transfer(from, to, token_id, valu\x10e)")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("inlineCode",{parentName:"p"},"from"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"to")," are optional, no ",(0,i.kt)("inlineCode",{parentName:"p"},"from")," attribute means minting, no ",(0,i.kt)("inlineCode",{parentName:"p"},"to")," attribute means burning, but they mustn't be\nneglected at the same time."))),(0,i.kt)("h2",{id:"metadata"},"Metadata"),(0,i.kt)("h3",{id:"queries-1"},"Queries"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"TokenInfo{ token_id }")," - Query metadata url of ",(0,i.kt)("inlineCode",{parentName:"p"},"token_id"),"."),(0,i.kt)("h3",{id:"events-1"},"Events"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"token_info(url, token_id)")),(0,i.kt)("p",null,"Metadata url of ",(0,i.kt)("inlineCode",{parentName:"p"},"token_id")," is changed, ",(0,i.kt)("inlineCode",{parentName:"p"},"url")," should point to a json file."),(0,i.kt)("h2",{id:"enumerable"},"Enumerable"),(0,i.kt)("h3",{id:"queries-2"},"Queries"),(0,i.kt)("p",null,"Pagination is acheived via ",(0,i.kt)("inlineCode",{parentName:"p"},"start_after")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"limit"),". Limit is a request\nset by the client, if unset, the contract will automatically set it to\n",(0,i.kt)("inlineCode",{parentName:"p"},"DefaultLimit")," (suggested 10). If set, it will be used up to a ",(0,i.kt)("inlineCode",{parentName:"p"},"MaxLimit"),"\nvalue (suggested 30). Contracts can define other ",(0,i.kt)("inlineCode",{parentName:"p"},"DefaultLimit")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"MaxLimit"),"\nvalues without violating the CW1155 spec, and clients should not rely on\nany particular values."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"start_after")," is unset, the query returns the first results, ordered by\nlexogaphically by ",(0,i.kt)("inlineCode",{parentName:"p"},"token_id"),". If ",(0,i.kt)("inlineCode",{parentName:"p"},"start_after")," is set, then it returns the\nfirst ",(0,i.kt)("inlineCode",{parentName:"p"},"limit")," tokens ",(0,i.kt)("em",{parentName:"p"},"after")," the given one. This allows straight-forward\npagination by taking the last result returned (a ",(0,i.kt)("inlineCode",{parentName:"p"},"token_id"),") and using it\nas the ",(0,i.kt)("inlineCode",{parentName:"p"},"start_after")," value in a future query. "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Tokens{owner, start_after, limit}")," - List all token_ids that belong to a given owner.\nReturn type is ",(0,i.kt)("inlineCode",{parentName:"p"},"TokensResponse{tokens: Vec<token_id>}"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"AllTokens{start_after, limit}")," - Requires pagination. Lists all token_ids controlled by the contract."))}m.isMDXComponent=!0}}]);