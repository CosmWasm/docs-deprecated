"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2797],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(a),u=r,f=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return a?n.createElement(f,s(s({ref:t},p),{},{components:a})):n.createElement(f,s({ref:t},p))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},921:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:3},s="Complex State and Maps",i={unversionedId:"smart-contracts/state/complex-state",id:"smart-contracts/state/complex-state",title:"Complex State and Maps",description:"Of course, for most non-trivial examples, additional data will need to be stored. You can serialise larger JSON data",source:"@site/docs/04-smart-contracts/03-state/03-complex-state.md",sourceDirName:"04-smart-contracts/03-state",slug:"/smart-contracts/state/complex-state",permalink:"/fr/docs/smart-contracts/state/complex-state",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Simple State",permalink:"/fr/docs/smart-contracts/state/simple-state"},next:{title:"Entry points",permalink:"/fr/docs/smart-contracts/entry-points"}},l={},c=[],p={toc:c};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"complex-state-and-maps"},"Complex State and Maps"),(0,r.kt)("p",null,"Of course, for most non-trivial examples, additional data will need to be stored. You can serialise larger JSON data\nstructures, and use key-value lookups to access this data."),(0,r.kt)("p",null,"In CW20, the mapping of addresses to their CW20 balance is achieved through just such a map:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'pub const BALANCES: Map<&Addr, Uint128> = Map::new("balance");\n')),(0,r.kt)("p",null,"The code for this can be\nfound ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cw-plus/blob/main/contracts/cw20-base/src/state.rs#L35"},"here"),"."),(0,r.kt)("p",null,"You can see how it is interacted with\nin ",(0,r.kt)("inlineCode",{parentName:"p"},"contract.rs")," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cw-plus/blob/main/contracts/cw20-base/src/contract.rs#L303"},"here"),". The\nrelevant snippet is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let rcpt_addr = deps.api.addr_validate( & recipient) ?;\nBALANCES.update(\ndeps.storage,\n& rcpt_addr,\n| balance: Option<Uint128> | -> StdResult<_ > { Ok(balance.unwrap_or_default() + amount) },\n) ?;\n")),(0,r.kt)("p",null,"There's a bit going on here, so let's unpack it."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"deps.storage")," is passed in. This is from the contract context. ",(0,r.kt)("inlineCode",{parentName:"li"},"deps")," is similar to the ",(0,r.kt)("inlineCode",{parentName:"li"},"ctx")," you will have seen in\nthe Cosmos SDK."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"&rcpt_addr")," is a borrowed reference to the validated recipient address - it is valid, or the ",(0,r.kt)("inlineCode",{parentName:"li"},"let")," statement would\nhave errored. This is the key half of the key/value pair."),(0,r.kt)("li",{parentName:"ol"},"The third statement is a lambda (anonymous function) returning ",(0,r.kt)("inlineCode",{parentName:"li"},"StdResult")," that does some computation based on the\ncurrent value of ",(0,r.kt)("inlineCode",{parentName:"li"},"balance"),", where ",(0,r.kt)("inlineCode",{parentName:"li"},"balance")," is the value half, and ",(0,r.kt)("inlineCode",{parentName:"li"},"&rcpt_addr")," is the key.")),(0,r.kt)("p",null,"More sophisticated contracts, such as CW1155, allow for the creation and management of multiple coins."),(0,r.kt)("p",null,"For more advanced usage, indexing and more, check out:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.cosmwasm.com/tutorials/storage/indexes"},"Indexes in CosmWasm")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.cosmwasm.com/tutorials/storage/state-modeling"},"Advanced State Modeling in CosmWasm")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.cosmwasm.com/tutorials/storage/key-value-store"},"How CW Storage Works"))))}d.isMDXComponent=!0}}]);